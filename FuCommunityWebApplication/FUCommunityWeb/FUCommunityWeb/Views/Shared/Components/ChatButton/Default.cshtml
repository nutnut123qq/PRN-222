@using System.Security.Claims
@model ApplicationUser

<button class="btn btn-primary" type="button" onclick="openChat('@Model.Id', '@Model.FullName')" data-bs-toggle="modal" data-bs-target="#chatModal">
    <i class="fas fa-comment"></i> Nhắn tin
</button>

<!-- Chat Modal -->
<div class="modal fade" id="chatModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Chat với <span id="chatUserName"></span></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="chat-messages" id="chatMessages">
                    <!-- Messages will be loaded here -->
                </div>
                <div class="chat-input mt-3">
                    <div class="input-group">
                        <input type="text" id="messageInput" class="form-control" placeholder="Nhập tin nhắn...">
                        <button class="btn btn-primary" onclick="sendMessage()">Gửi</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.chat-messages {
    height: 400px;
    overflow-y: auto;
    padding: 15px;
}

.message {
    display: flex;
    margin-bottom: 15px;
}

.message.own {
    flex-direction: row-reverse;
}

.message .avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    margin: 0 10px;
}

.message-content {
    max-width: 70%;
}

.message-text {
    padding: 10px;
    border-radius: 15px;
    background: #f0f0f0;
}

.message.own .message-text {
    background: #007bff;
    color: white;
}

.message-time {
    font-size: 12px;
    color: #666;
    margin-top: 5px;
}
</style>

<script>
let currentChatUserId = '';
let currentChatUserName = '';

function openChat(userId, userName) {
    currentChatUserId = userId;
    currentChatUserName = userName;
    $('#chatUserName').text(userName);
    loadMessages();
}

async function loadMessages() {
    try {
        const response = await fetch(`/Chat/GetMessages?userId=${currentChatUserId}`);
        const messages = await response.json();
        displayMessages(messages);
    } catch (error) {
        console.error('Error loading messages:', error);
    }
}

function displayMessages(messages) {
    const chatMessages = $('#chatMessages');
    chatMessages.empty();
    
    messages.forEach(msg => {
        const isOwn = msg.senderId === '@User.FindFirstValue(ClaimTypes.NameIdentifier)';
        const messageHtml = `
            <div class="message ${isOwn ? 'own' : 'other'}">
                <img src="${msg.senderAvatar}" class="avatar">
                <div class="message-content">
                    <div class="message-text">${msg.content}</div>
                    <div class="message-time">${new Date(msg.createdDate).toLocaleString()}</div>
                </div>
            </div>
        `;
        chatMessages.append(messageHtml);
    });
    
    chatMessages.scrollTop(chatMessages[0].scrollHeight);
}

async function sendMessage() {
    const messageInput = $('#messageInput');
    const message = messageInput.val().trim();
    
    if (message && currentChatUserId) {
        try {
            const response = await fetch('/Chat/SendMessage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    receiverId: currentChatUserId,
                    content: message
                })
            });

            if (response.ok) {
                messageInput.val('');
                loadMessages(); // Reload messages after sending
            }
        } catch (error) {
            console.error('Error sending message:', error);
        }
    }
}

// Handle Enter key in message input
$('#messageInput').on('keypress', function(e) {
    if (e.which === 13) {
        sendMessage();
    }
});
</script> 